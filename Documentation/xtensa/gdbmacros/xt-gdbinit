#
# Example .xt-gdbinit file:
#
#	Sets a hardware breakpoint at _startup to setup
#	kernel breakpoints once the V3 MMU has remapped 
#	to our normal virtaul mappings.
#
#	Includes general purpose macros for dumping the
#	the state of the PTEs, TLB, task list and switching
#	the context to a particular task for backtrace.
#
#	Breakpoints in exception vectors can only be enabled
#	once the exception vectors have been set up by the
#	kernel.
#
#	Tuneed for used with xt-gdb driven with ddd with
#	kernel compiled without optimization.
#
#					    -piet
#
set editing on
set radix 0x0a
set print pretty
set print array
set print union
set pagination off
set can-use-hw-watchpoints 1
set print elements 64
set var $doing_commands = 0
set var $sa_tcp_breakpoints = 0
set var $set_exception_breakpoints = 0
set var $mess_with_context_asid = 0

set var $monitor_trace_supported = 1
set var $monitor_trace_enabled = 0
set var $monitor_verify_supported = 1
set var $monitor_verify_enabled = 1

set var $debug_stress_test = 1
set var $debug_irq_init = 0
set var $debug_irqs_disabled = 0
set var $debug_irq_handler = 0
set var $debug_uart = 0
set var $debug_sound = 0
set var $debug_lcd = 0
set var $debug_initcalls = 0
set var $debug_modules = 0
set var $debug_all_sound = 0
set var $debug_vm_page_mapcount = 0
set var $debug_vm_page_mapcount_writers = 0
set var $debug_clear_lazy_smp_coprocessor_flushing_enabled = 0

# NOTE: A Breakpoint at init_arch causes 2nd CPU to get stuck;
#       which is a handy way to come up with just 1 CPU
set var $debug_init_arch = 0

# $debug_reset needed for placing breakpoints with V3 MMU
set var $debug_reset = 1		

set var $debug_skip_free_initmem = 1
set var $debug_out_of_memory = 0
set var $debug_start_kernel = 0
set var $debug_platform_init = 0
set var $debug_platform_setup = 0
set var $debug_setup_arch = 0
set var $debug_mem_init = 0
set var $debug_page_table_code = 0
set var $debug_bootmem_init = 0
set var $debug_early_page_alloc = 0
set var $debug_highmem_init = 0
set var $debug_xtensa_highmem = 0
set var $debug_generic_highmem = 0
set var $debug_page_faults = 0
set var $debug_free_area_init_node = 0
set var $debug_unmap_region = 0
set var $debug_open_eth = 0
set var $debug_exceptions = 0
set var $debug_page_migration = 0
set var $mx = 0
set var $debug_iss_simulation = 0
set var $debug_hw_breakpoints_supported = 1

if $mx
	set var $debug_secondary = 1
	set var $debug_ipi_messages = 1
	set var $debug_cpu_init = 1
	set var $debug_migration = 1
	set var $debug_boot_secondary_processors = 1
else
	# These Breakpoints are not available for non-SMP systems.
	# MUST BE SET to ZERO
	set var $debug_secondary = 0
	set var $debug_ipi_messages = 0
	set var $debug_cpu_init = 0
	set var $debug_migration = 0
	set var $debug_boot_secondary_processors = 0
end
set logging on
set logging file kgdb.log
set logging overwrite on
# show logging
# set debug remote 10
set debug remote 0
# set backtrace limit 50

display/i $pc
#target sim --timer
set output-radix 16

# set debug remote 1
# set remotebaud 115200
# set remotebaud 19200

# target remote udp:192.168.110.61:6443 MY_GATE
# target remote /dev/ttyS0
# target remote gums:20000 0

#
# Delete Any Existing Breakpoints. This makes
# it possible to source this .xt-gdbinit file
# more than once.
delete

if $mx
#	add-symbol-file vmlinux 0xd0000000
	add-symbol-file vmlinux 0
	file arch/xtensa/boot/Image.elf
#	target remote gums:20000 0xd0000012
#	target remote gums:20001 0xd0000012
#	target remote gums:20002 0xd0000012
#	target remote gums:20000 &spill_location_0
	target remote localhost:40000 &spill_location_0
#	target remote localhost:40001 &spill_location_1
#	target remote localhost:20002 &spill_location_2
#	target remote gums:20001 &spill_location_1
#	target remote gums:20002 &spill_location_2
#
# 2nd Board
#	target remote localhost:20010 0
#	target remote localhost:20000 0
else
	add-symbol-file vmlinux 0xd0003000
	file arch/xtensa/boot/Image.elf
	if ($debug_iss_simulation != 0 )
	  # Simulator can used up to 128MB [134,217,728 Bytes]
	  # Use 'xt-run --help' to see args forwared by 'target sim' gdb command.
	  echo "target sim --turbo --memlimit=128\n"
	        target sim --turbo --memlimit=128
	else 

	  echo "target remote localhost:20000  &spill_location_0"
	        target remote localhost:20000  &spill_location_0
#	        target remote  tuscana2:20000  &spill_location_0
        end
end

if $debug_iss_simulation == 0
  reset

  if $monitor_trace_supported
    echo "Monitor trace off\n"
    monitor trace off
  end
  
  if $monitor_verify_supported
    echo "monitor verify all off\n"
    monitor verify all off
    monitor verify verbose off
  end
  
  echo "load: Started\n"
  load
  echo "load: Completed\n"
  
  if $monitor_trace_supported
    if $monitor_trace_enabled
      echo "Monitor trace on\n"
      monitor trace on
      monitor trace level 35
    end
  end
  
  if $monitor_verify_supported
    if $monitor_verify_enabled
      echo "Monitor verify all on\n"
      monitor verify all on
    end
  end
end

#   NOTE: you can't enable this breakpoint while
#         single stepping in the MMU-V3 remapping
#	  code and mapped to 0x46000000.
#
def set_breakpoints
	echo "\n"
	echo "================================ set_breakpoint: Beginning ==================================\n"
	echo "\n"

	if $debug_clear_lazy_smp_coprocessor_flushing_enabled
		echo "\n"
		echo "Setting lazy_smp_coprocessor_flushing_enabled = 1\n"
		set lazy_smp_coprocessor_flushing_enabled = 1
	end

	if $debug_irq_handler
		echo "\n"
		echo "Setting IRQ Handler Breakpoints\n"
		break *&__set_irq_handler
		break do_interrupt
		break handle_level_irq
	end

	if $debug_skip_free_initmem
		echo "\n"
		echo "Skip Free of Init Memory; might have breakpoints in init code.\n"	
		set skip_free_of_initmem = 1
	end

	if $debug_page_table_code
		echo "\n"
		echo "Setting Page Table Vmalloc Code  Breakpoints (mm/vmalloc.c)\n"
		break map_vm_area
		break  vmap_page_range
		break   vmap_pud_range
		break    vmap_pte_range
		break     __pte_alloc_kernel
		break      pte_alloc_one_kernel
#		break __cache_alloc
#		break pgd_ctor
	end

	if $debug_page_migration
		echo "\n"
		echo "Setting page migration Breakpoints\n"
		break usemap_size
		break setup_usemap
		break get_pageblock_migratetype
		break get_pageblock_flags_group
		break free_hot_cold_page
		break free_pages_bulk
	end
		

	if $debug_pmd_code
		echo "\n"
		echo "Setting Page Middle Directory (PMD) Code  Breakpoints\n"
	end

	if $debug_bootmem_init 
		echo "\n"
		echo "Setting Boot Memory Initialization Breakpoints\n"
		break mem_init
		break bootmem_init
		break zones_init
		break free_reserved_mem
		break free_initmem
		break free_area_init_node
		break free_bootmem
		break mark_bootmem
		break mark_bootmem_node
		break init_bootmem_node
		break init_bootmem
		break free_all_bootmem_core
		break init_bootmem_core
	end
	
	if $debug_early_page_alloc
		echo "\n"
		echo "Setting Early Page Allocation Initialization Breakpoints\n"
		break free_area_init_node
		break alloc_node_mem_map
		break calculate_node_totalpages
		break free_hot_page
		break mem_init
	end

	if $debug_highmem_init
		echo "\n"
		echo "Setting High-Memory Initialization Breakpoints (arch/xtensa/mm/mmu.c)\n"
		break page_table_range_init
		break permanent_kmaps_init
		break pagetable_init
		break kmap_init
		break init_mmu
		break paging_init
		break pgd_ctor
		break pgtable_cache_init
	end

	if $debug_xtensa_highmem
		echo "\n"
		echo "Setting Xtensa High-Memory Breakpoints (arch/xtensa/mm/highmem.c)\n"
		break kmap
		break kunmap
		break debug_kmap_atomic_prot
		break kmap_atomic_prot
#		break kmap_atomic
#		break kunmap_atomic
		break kpte_clear_flush		
		break kmap_atomic_pfn
		break kmap_atomic_to_page
#		break __pte_alloc_kernel
#		break xdr_partial_copy_from_skb
	end

	if $debug_generic_highmem
		echo "\n"
		echo "Setting Generic High-Memory Breakpoints (mm/highmem.c)\n"
#		break nr_free_highpages
		break flush_all_zero_pkmaps
		break kmap_flush_unused
		break map_new_virtual
		break kmap_high
		break kunmap_high
		break page_address_map
		break page_address
		break set_page_address
		break page_address_init
	end

	if $debug_page_faults
		break platform_init
		break do_page_fault
		break handle_mm_fault
		break handle_pte_fault
		break do_linear_fault
		break __do_fault
		break filemap_fault
	end
		
	if ($mx != 0)
	    # echo "MX\n"
	    if ($debug_cpu_init != 0)
		echo "\n"
		echo "Setting CPU Initialization Breakpoints\n"
		break cpu_up
		break _cpu_up
		break __cpu_up
		break cpu_online
		break smp_init
		break smp_init_cpus
		break get_core_count
		break smp_prepare_cpus
		break secondary_start_kernel
	    end

	    if ($debug_secondary != 0)
		echo "\n"
		echo "MX/SMP Processor: Setting secondary CPU Breakpoints\n"
		break wakeup_secondary_cpu
		break secondary_irq_enable
	    end

	    if $debug_boot_secondary_processors == 0
		echo "\n"
		echo "Setting boot_secondary_processors = 0\n"
		set boot_secondary_processors = 0
	    end

    	    if ($debug_migration != 0) 
		echo "\n"
		echo "Setting Migration Breakpoints\n"
		break load_balance
        	break *&fast_coprocessor
    	    end

	    if ($debug_ipi_messages != 0)
		echo "MX/SMP Processor: Setting IPI Message Breakpoints\n"
		break send_ipi_message
		break recv_ipi_messages
	    end
	
	    if ($debug_irq_init != 0)
		echo "\n"
	        echo "MX/SMP Processor, setting MX IRQ Breakpoints\n"
		break xtensa_mx_irq_mask
		break xtensa_mx_irq_unmask
		break xtensa_mx_irq_ack
		break xtensa_mx_irq_retrigger
		break secondary_irq_init
	   else
		echo "\n"
		echo "MX/SMP Processor: No irq_init BreakPoints to be set.\n"
	   end	

	else
	    # echo "NOT_MX\n"
	    if ($debug_irq_init != 0)
		echo "\n"
	        echo "Non-MX/UP/Non-SMP Processor, setting STD IRQ Breakpoints\n"
		break xtensa_irq_mask
		break xtensa_irq_unmask
		break xtensa_irq_ack
		break xtensa_irq_retrigger
	    else
		 echo "\n"
		 echo "Non-MX/UP/Non-SMP Processor:  No irq_init BreakPoints to be set\n"
	    end
	end 

	if ($debug_free_area_init_node != 0)
	    echo "\n"
	    echo "Setting free_area_init_node Breakpoint\n"	
	    break free_area_init_node
	    set var $free_area_init_node = $bpnum
	end

	# echo "$debug_exceptions: "
	# print $debug_exceptions
	# echo "\n"
	if ($debug_exceptions != 0)
		echo "\n"
	        echo "Setting Exception Handler Breakpoints; CAN'T BE ENABLED YET.\n"
		break  *&_UserExceptionVector
		set var $_UserExceptionVector = $bpnum
		disable $_UserExceptionVector

		break  *&_KernelExceptionVector
		set var $_KernelExceptionVector = $bpnum
		disable $_KernelExceptionVector

		break  *&_DoubleExceptionVector
		set var $_DoubleExceptionVector = $bpnum
		disable $_DoubleExceptionVector
	
		break  *&fast_unaligned
		set var $fast_unaligned = $bpnum
		disable $fast_unaligned
	end

	# echo "$debug_init_arch: "
	# print $debug_init_arch
	# echo "\n"
	if ($debug_init_arch != 0)
	    echo "\n"	
	    echo "Setting ARCH Initialization Breakpoints\n"
	    break init_arch
	    set $init_arch = $bpnum
	    if ($doing_commands != 0)
		echo "\n"
		echo "TYPE 'set_breakpoints' TO ENABLE ARCH INITIALIZATION BREAKPOINTS\n"
		echo "\n"
	    else
	      	commands $init_arch
		    disable $init_arch
		    echo "\n"	
	            echo "init_arch(): Enabling Breakpoints at Exception Vectors\n"
	            enable $_DoubleExceptionVector_Hang
	            echo skip enable $fast_unaligned
	       	    continue
	      	end
	    end
	 end
	
	if ($debug_start_kernel != 0)
	    echo "\n"
	    echo "Setting 'start_kernel' Breakpoint\n"
	    break start_kernel
	    set $start_kernel = $bpnum
	end
	
	if ($debug_platform_init != 0)
	    echo "\n"
	    echo "Setting 'platform_init' breakpoint\n"
	    if $debug_platform_init
	        break platform_init
	        set $platform_init = $bpnum
	    end
	end

	if ($debug_platform_setup != 0)
		echo "\n"
		echo "Setting 'platform_setup' breakpoint\n"	
		break platform_setup
		set $platform_setup = $bpnum
	end
	
	if ($debug_setup_arch != 0)
		echo "\n"
		echo "Setting 'setup_arch' breakpoint\n"	
		break setup_arch
		set $setup_arch = $bpnum
	end
	
	if ($debug_unmap_region != 0)
	    break unmap_region
	    set $unmap_region = $bpnum
	end
	
	 if ($debug_irqs_disabled != 0)
	    break irqs_disabled
	    set $irqs_disabled = $bpnum
	end
	
	if ($debug_out_of_memory != 0)
	    echo "\n"	
	    echo "Setting 'out_of_memory' Breakpoints\n"
	    break out_of_memory
	    set $out_of_memory = $bpnum
	    
	    break oom_kill_process
	    set $oom_kill_process = $bpnum
	else
	     echo "\n"
	     echo "NOT Setting 'out_of_memory' Breakpoints\n"			
	end
	
#
#	You likely don't want to have a breakpoint here
#	with multiple cpu's. The other CPUs will think
#	it's a SIGTRAP and leave things in a bad state.
#	There will be BREAK instructions in your code
#	and you will have to detach.
#
	if ($debug_stress_test == 0)
		echo "\n"
		echo "Not doing Stress Test; Setting Additional Breakpoints\n"
		break dump_stack
		break do_unaligned_user
		break die 
	else
		echo "\n
		echo "Doing Stress Test; NOT Setting Additional Breakpoints\n"
	end
	

	if ($debug_open_eth != 0)
		echo "\n"
		echo "Setting Open Ethernet Breakpoints\n"
                break oeth_probe
                break oeth_open
                break oeth_start_xmit
                break oeth_init
                break oeth_interrupt
                break ip_local_deliver_finish
                break ip_local_deliver
                break ip_rcv_finish
                break ip_rcv
	else
		echo "\n"
		echo "NOT Setting Open Ethernet Breakpoints\n"
	end

	if ($debug_initcalls != 0)
		echo "\n"
		echo "Setting Initcall Breakpoints\n"
		break do_one_initcall
	else
		 echo "\n"
		 echo "NOT Setting Initcall Breakpoints\n"
	end

	if ($debug_modules != 0)
		echo "\n"
		echo "Setting Module Breakpoints\n"
		break load_module
		set var $load_module = $bpnum
		if $doing_commands
			echo "Type 'set_breakpoints' to set Module Breakpoints\n"
		else
		    commands $load_module
			break sys_init_module
			break apply_relocate_add
			break do_one_initcall
		    end
		end
		# set apply_relocate_add_enabled = 1
	else
		echo "\n"
		echo "NOT Setting Module Breakpoints\n"	
	end

	# break print_oops_end_marker
	# break show_stack
	# break  *&fast_second_level_miss_double_kernel
	# break  *&_DoubleExceptionVector_WindowOverflow
	# break update_mmu_cache
	# break copy_pte_range
	# break zap_pte_range
	# break remap_pte_range
	# break change_pte_range
	# break move_ptes
	# break ic_dynamic
	# break parse_early_param


    if ($debug_uart != 0)
	echo "\n"
	echo "Setting UART Breakpoints\n"
    	break uart_get_baud_rate	
    	break time_init	
    	break uart_parse_options	
    	break uart_set_options	
    	break __platform_calibrate_ccount
    end	

    if ($debug_all_sound != 0) 
	echo "\n"
	echo "Setting ALL HiFi-2 Sound Driver Breakpoints\n"
	#
	# HiFI-2 Driver at sound/oss/sound_lx200.c
	# No Interrupt handler.
	#
	break aic23_write_reg
	break aic23_config_dac
	break aic23_set_vol
	break aic23_get_vol
	break aic23_set_freq
	break slx200_fifo_logic
	break slx200_audio_mute
	break slx200_fifo_write
	break slx200_set_sample_rate
	break slx200_set_volume
	break slx200_set_channels
	break slx200_audio_ioctl
	break slx200_audio_write
	break slx200_audio_open
	break slx200_audio_release
	break slx200_init
    end

    if ($debug_sound != 0)
	echo "\n"
	echo "Setting Common HiFi-2 Sound Driver Breakpoints\n"
	break slx200_audio_open
	break slx200_audio_write
	break slx200_fifo_write
	break slx200_audio_ioctl
	break i2s_output_interrupt
	break i2s_input_interrupt
	break move_full_audio_buffs_to_free_list
	break release_audio_buffs
	break slx200_audio_release
	graph display free_audio_buffs
	graph display full_audio_buffs
    else
	 echo "\n"
	 echo "NOT Setting Common HiFi-2 Sound Driver Breakpoints\n"	
    end

    if ($debug_lcd != 0)
	break lcd_init
	break lcd_disp_at_pos
	break lcd_shiftleft
	break lcd_shiftright
    end


    if ($debug_vm_page_mapcount != 0)
	echo "\n"
	echo "Setting vm_page_mapcount Breakpoints\n"
	break reset_page_mapcount
	break page_mapcount
	break page_dup_rmap
#	break get_page_bootmem
#	break put_page_bootmem
	break page_add_anon_rmap
	break page_add_new_anon_rmap
	break page_add_file_rmap
	break page_dup_rmap
	break page_remove_rmap
#	break free_map_bootmem
    end

    if ($debug_vm_page_mapcount_writers != 0)
	echo "\n"
	echo "Setting vm_page_mapcount_writers Breakpoints\n"
	break reset_page_mapcount
	break page_dup_rmap
#	break get_page_bootmem
#	break put_page_bootmem
	break page_add_anon_rmap
	break page_add_new_anon_rmap
	break page_add_file_rmap
	break page_dup_rmap
	break page_remove_rmap
    end

#
# Misc Breakpoints
#
	echo "\n"
	echo "Setting Misc Breakpoints\n"
	break break_on 
	break die 
	break panic
	break warn_slowpath
#	break xtensa_breakpoint
#	break show_regs
#	break handle_pte_fault
#	break bad_page_fault
	break bad_page
	break bad_page_fault_bp
	break update_mmu_cache_bp
	break IRQ_likely_stack_overflow_breakpoint
#	break swapon
	break do_debug
	break do_illegal_instruction
	break do_multihit
	break do_unhandled
# 	break dtlb_probe
#	break get_current_bp
# 	break _image_start
#	break *&_startup
#	break emit_log_char
#	break printk
#	break init_mmu
#	break init_IRQ
#
	echo "\n"
	echo "=============================== set_breakpoint: Completed ======================================\n"
	echo "\n"
end


def source_gdb_macros
    #
    # Bring in gdb macros after re-mapping MMU
    # so they can access config constants.
    #	
    source ps.gdb
    source showtlb.gdb
    source showcache.gdb
    source show_mem_pte.gdb
    source show_pages.gdb
end

def set_kernel_flags
	echo "$mess_with_context_asid:"
	print $mess_with_context_asid
	if $mess_with_context_asid != 0
		echo "set config_ignore_mm_context_asid = 1;\n"
		set config_ignore_mm_context_asid = 1
		print config_ignore_mm_context_asid
	end
end

#
# Now we set up a HARDWARE BREAKPOINT at the
# first code executed after we map the MMU
# to the virtual addresses Linux is configured
# for; typically 0xd000,000 region.
#
# Once we hit _startup it's safe to set
# the normal kernel brekpoints and to
# play with configurable global variables.
#
if $debug_hw_breakpoints_supported
  show can-use-hw-watchpoints
  hbreak _startup
else
  break set_breakpoints
end

set var $_startup = $bpnum
commands $_startup
    set var $doing_commands = 1
    set_breakpoints	
    source_gdb_macros
    set_kernel_flags    
    delete $_startup
    if $debug_hw_breakpoints_supported	
        hbreak *&_DoubleExceptionVector_Hang	
#       hbreak 0X200014fc
    end
    info breakpoints
    set var $doing_commands = 0
    set bootmem_debug = 1	
end




define exit 
	quit
	end

define regs 
	info registers pc a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15
	end

define cregs
	info registers ccount ccompare0 ccompare1
	end

define iregs
	info registers interrupt intenable icount icountlvl psintlvl
	end

define lregs
	info registers lbeg lend lcount
	end

define restart
	set *(volatile unsigned *)0xfd020010 = 0xdead
	end

define i8regs 
	info registers i80 i81 i82 i83 i84 i85 i86 i87 i88 i89 i810 i811 i812 i813 i814 i815
	end

define i16regs 
	info registers i160 i161 i162 i163 i164 i165 i166 i167 i168 i169 i1610 i1611 i1612 i1613 i1614 i1615
	end

define i32regs 
	info registers i320 i321 i322 i323 i324 i325 i326 i327 i328 i329 i3210 i3211 i3212 i3213 i3214 i3215
	end

define extraregs 
	info registers s8 s16 s32 result
	end

define memfree
	graph display contig_page_data

	print contig_page_data.node_zones[0].name
	print contig_page_data.node_zones[0].present_pages

	print contig_page_data.node_zones[1].name
	print contig_page_data.node_zones[1].present_pages

	print contig_page_data.node_zones[2].name
	print contig_page_data.node_zones[2].present_pages
end

if $debug_iss_simulation
   echo "Starting Simulation\n"
   break _ResetVector
   break _image_start
   break _startup
   run
end

echo ".xt-gdbinit: Done\n"
